# -*- encoding: utf-8 -*-
## The MIT License (MIT)
##
## Copyright (c) 2014-2024
## Savin Max <mafei.198@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

desc "Generate Wordfilter from txt"
task :generate_wordfilter => :environment do
  file_path = File.expand_path("#{FRAMEWORK_ROOT_DIR}/app/config_data/gameconfig/wordfilter.txt")
  words = File.open(file_path, "r"){|io| io.read }.split(",")

  word_map = {}
  words.each do |word|
    next if word.blank?
    chars = word.split("")
    key = chars.first
    node = word_map[key] || word_map[key] = {}
    size = chars.size
    chars[1..-1].each_with_index do |char, idx|
      if node[char].nil?
        node[char] = {}
      end

      if idx == size - 2 then
        node[char] = {"stop" => {}}
      end

      node = node[char]
    end
  end

  def make_tuple(map)
    if map == {} 
      return "stop" 
    end
    map.keys.map do |k|
      v = map[k]
      if v == {} then
        if k == "stop" then
          %Q({"#{k}", stop})
        else
          %Q({"#{k}", [{"stop", stop}]})
        end
      else
        %Q({"#{k}", [#{make_tuple(v)}]})
      end
    end.join(",\n")
  end

  content = make_tuple(word_map)

  `mkdir -p #{FRAMEWORK_ROOT_DIR}/app/generates`
  file_path = "#{FRAMEWORK_ROOT_DIR}/app/helpers/wordfilter.hrl"
  file_content = %Q{%%% Generated by generate_wordfilter.rake
%% -*- coding: utf-8 -*-"
-define(WORD_FILTER, [#{content}]).
}
  check_to_write(file_path, file_content)
end
